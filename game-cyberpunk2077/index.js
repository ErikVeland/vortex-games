const { isWindows } = require('vortex-api');
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const vortex_api_1 = require("vortex-api");
const GAME_ID = 'cyberpunk2077';
const STEAM_ID = '1091500';
const GOG_ID = '1423049311';
const EPIC_ID = '77f2b98e2cfd40c8a7e58ab7b1b8a6b2';
const REQUIRED_FILES = [];
const ALTERNATIVE_FILES = [
    'Cyberpunk2077.exe',
    'bin/Cyberpunk2077.exe',
    'engine/config/platform/pc/engine.ini',
];
function findGame() {
    return vortex_api_1.util.GameStoreHelper.findByAppId([STEAM_ID, GOG_ID, EPIC_ID])
        .then(game => {
        (0, vortex_api_1.log)('debug', 'Found Cyberpunk 2077 via game store', { path: game.gamePath });
        return game.gamePath;
    })
        .catch(() => {
        (0, vortex_api_1.log)('debug', 'Game store detection failed, trying manual paths');
        const commonPaths = [
            '/Applications/Cyberpunk 2077.app/Contents/Resources',
            '/Applications/Games/Cyberpunk 2077.app/Contents/Resources',
            path_1.default.join(process.env.HOME || '', 'Library/Application Support/CrossOver/Bottles/Steam/drive_c/Program Files (x86)/Steam/steamapps/common/Cyberpunk 2077'),
            path_1.default.join(process.env.HOME || '', 'Games/Cyberpunk 2077'),
            path_1.default.join(process.env.HOME || '', 'Library/Application Support/Steam/steamapps/common/Cyberpunk 2077'),
        ];
        return bluebird_1.default.mapSeries(commonPaths, (gamePath) => {
            return vortex_api_1.fs.statAsync(gamePath)
                .then(() => {
                (0, vortex_api_1.log)('debug', 'Found potential Cyberpunk 2077 path', { path: gamePath });
                return gamePath;
            })
                .catch(() => {
                (0, vortex_api_1.log)('debug', 'Path not found', { path: gamePath });
                return undefined;
            });
        }).then((results) => {
            const validPath = results.find(path => path !== undefined);
            if (validPath) {
                (0, vortex_api_1.log)('info', 'Cyberpunk 2077 found at', { path: validPath });
                return validPath;
            }
            (0, vortex_api_1.log)('warn', 'Cyberpunk 2077 not found in any common locations');
            throw new Error('Cyberpunk 2077 not found');
        });
    });
}
function testSupportedContent(files, gameId) {
    const supported = files.find(file => path_1.default.extname(file).toLowerCase() === '.archive' ||
        path_1.default.extname(file).toLowerCase() === '.xl' ||
        file.toLowerCase().includes('cyberpunk') ||
        file.toLowerCase().includes('redmod')) !== undefined;
    return bluebird_1.default.resolve({
        supported,
        requiredFiles: [],
    });
}
function installContent(files) {
    const instructions = files.map(file => ({
        type: 'copy',
        source: file,
        destination: file,
    }));
    return bluebird_1.default.resolve({ instructions });
}
function prepareForModding(discovery) {
    const modPath = path_1.default.join(discovery.path, 'archive', 'pc', 'mod');
    return vortex_api_1.fs.ensureDirWritableAsync(modPath);
}
function main(context) {
    context.registerGame({
        id: GAME_ID,
        name: 'Cyberpunk 2077',
        mergeMods: false,
        queryPath: findGame,
        supportedTools: [],
        queryModPath: () => 'archive/pc/mod',
        logo: 'gameart.jpg',
        executable: (discoveredPath) => {
            if (process.platform === 'darwin') {
                if (discoveredPath && discoveredPath.includes('steamapps')) {
                    return 'Cyberpunk2077.app/Contents/MacOS/Cyberpunk2077';
                }
                return 'Cyberpunk2077';
            }
            if (!discoveredPath || typeof discoveredPath !== 'string' || discoveredPath.trim() === '') {
                return 'bin/x64/Cyberpunk2077.exe';
            }
            const possibleExecutables = [
                'bin/x64/Cyberpunk2077.exe',
                'Cyberpunk2077.exe',
                'bin/Cyberpunk2077.exe',
            ];
            for (const exe of possibleExecutables) {
                const fullPath = path_1.default.join(discoveredPath, exe);
                try {
                    if (vortex_api_1.fs.statSync(fullPath).isFile()) {
                        return exe;
                    }
                }
                catch (err) {
                }
            }
            return 'bin/x64/Cyberpunk2077.exe';
        },
        requiredFiles: REQUIRED_FILES,
        setup: prepareForModding,
        environment: {
            SteamAPPId: STEAM_ID,
        },
        details: {
            steamAppId: parseInt(STEAM_ID, 10),
            gogAppId: GOG_ID,
            epicAppId: EPIC_ID,
        },
    });
    context.registerInstaller('cyberpunk2077-mod', 25, testSupportedContent, installContent);
    return true;
}
exports.default = main;
//# sourceMappingURL=data:application/json;base64,