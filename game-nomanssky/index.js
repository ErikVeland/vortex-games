"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const semver_1 = __importDefault(require("semver"));
const vortex_api_1 = require("vortex-api");
const GAME_ID = 'nomanssky';
const STEAMAPP_ID = '275850';
const XBOX_ID = 'HelloGames.NoMansSky';
const MODTYPE_DEPRECATED_PAK = 'nomanssky-deprecated-pak';
function purge(api) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => api.events.emit('purge-mods', true, (err) => err ? reject(err) : resolve()));
    });
}
function deploy(api) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => api.events.emit('deploy-mods', (err) => err ? reject(err) : resolve()));
    });
}
function findGame() {
    return vortex_api_1.util.GameStoreHelper.findByAppId([STEAMAPP_ID, XBOX_ID])
        .then(game => game.gamePath);
}
function deprecatedModPath() {
    return path_1.default.join('GAMEDATA', 'PCBANKS', 'MODS');
}
function modPath() {
    return path_1.default.join('GAMEDATA', 'MODS');
}
function migrate101(api, oldVersion) {
    return __awaiter(this, void 0, void 0, function* () {
        if (semver_1.default.gte(oldVersion, '1.0.1')) {
            return Promise.resolve();
        }
        const state = api.getState();
        const mods = vortex_api_1.util.getSafe(state, ['persistent', 'mods', GAME_ID], {});
        const modIds = Object.keys(mods).filter(modId => mods[modId].type !== 'nomanssky-deprecated-pak');
        const batched = modIds.map(modId => vortex_api_1.actions.setModType(GAME_ID, modId, MODTYPE_DEPRECATED_PAK));
        if (batched.length > 0) {
            try {
                (0, vortex_api_1.log)('info', 'Migrating mods to deprecated PAK type.', { mods: batched.length });
                yield api.awaitUI();
                yield purge(api);
                vortex_api_1.util.batchDispatch(api.store, batched);
                yield new Promise(resolve => setTimeout(resolve, 1000));
                yield deploy(api);
            }
            catch (err) {
                (0, vortex_api_1.log)('error', 'Failed to migrate mods to deprecated PAK type.', { err });
            }
        }
        return Promise.resolve();
    });
}
function prepareForModding(api, discovery) {
    return __awaiter(this, void 0, void 0, function* () {
        const pcbanks = path_1.default.join(discovery.path, 'GAMEDATA', 'PCBANKS');
        const ensureDir = (dir) => vortex_api_1.fs.ensureDirWritableAsync(path_1.default.join(discovery.path, dir));
        return Promise.all([ensureDir(modPath()), ensureDir(deprecatedModPath())])
            .then(() => vortex_api_1.fs.renameAsync(path_1.default.join(pcbanks, 'DISABLEMODS.TXT'), path_1.default.join(pcbanks, 'ENABLEMODS.TXT'))
            .catch(err => err.code === 'ENOENT' ? Promise.resolve() : Promise.reject(err)));
    });
}
function requiresLauncher(gamePath, store) {
    return __awaiter(this, void 0, void 0, function* () {
        if (store === 'xbox') {
            return Promise.resolve({
                launcher: 'xbox',
                addInfo: {
                    appId: XBOX_ID,
                    parameters: [{ appExecName: 'NoMansSky' }],
                },
            });
        }
        else {
            return Promise.resolve(undefined);
        }
    });
}
function getPakPath(api, game) {
    const discovery = api.getState().settings.gameMode.discovered[game.id];
    if (!discovery || !discovery.path) {
        return '.';
    }
    const dataPath = path_1.default.join(discovery.path, deprecatedModPath());
    return dataPath;
}
function testDeprecatedPakMod(instructions) {
    return __awaiter(this, void 0, void 0, function* () {
        const hasPak = instructions.some(inst => inst.source && inst.source.match(/\.pak$/i));
        return Promise.resolve(hasPak);
    });
}
function getGameVersion(gamePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const exeVersion = require('exe-version');
        return Promise.resolve(exeVersion.getProductVersionLocalized(path_1.default.join(gamePath, 'Binaries', 'NMS.exe')));
    });
}
function main(context) {
    context.registerGame({
        id: GAME_ID,
        name: 'No Man\'s Sky',
        mergeMods: true,
        queryPath: findGame,
        getGameVersion,
        queryModPath: modPath,
        logo: 'gameart.jpg',
        executable: () => 'Binaries/NMS.exe',
        requiredFiles: [
            'Binaries/NMS.exe',
        ],
        requiresLauncher: requiresLauncher,
        setup: (discovery) => prepareForModding(context.api, discovery),
        environment: {
            SteamAPPId: STEAMAPP_ID,
        },
        details: {
            steamAppId: +STEAMAPP_ID,
        },
    });
    context.registerModType(MODTYPE_DEPRECATED_PAK, 100, (gameId) => GAME_ID === gameId, (game) => getPakPath(context.api, game), testDeprecatedPakMod, { deploymentEssential: false, name: 'Deprecated PAK' });
    context.registerMigration(old => migrate101(context.api, old));
    return true;
}
module.exports = {
    default: main,
};
//# sourceMappingURL=data:application/json;base64,