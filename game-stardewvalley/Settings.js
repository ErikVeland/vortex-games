"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_bootstrap_1 = require("react-bootstrap");
const react_i18next_1 = require("react-i18next");
const react_redux_1 = require("react-redux");
const vortex_api_1 = require("vortex-api");
const actions_1 = require("./actions");
const common_1 = require("./common");
function Settings(props) {
    const { onMergeConfigToggle } = props;
    const sdvSettings = (0, react_redux_1.useSelector)((state) => state.settings['SDV']);
    const { useRecommendations, mergeConfigs } = sdvSettings;
    const store = (0, react_redux_1.useStore)();
    const { profileId } = (0, react_redux_1.useSelector)(mapStateToProps);
    const setUseRecommendations = react_1.default.useCallback((enabled) => {
        store.dispatch((0, actions_1.setRecommendations)(enabled));
    }, []);
    const setMergeConfigSetting = react_1.default.useCallback((enabled) => {
        onMergeConfigToggle(profileId, enabled);
    }, [onMergeConfigToggle, profileId]);
    const { t } = (0, react_i18next_1.useTranslation)();
    const mergeEnabled = mergeConfigs === null || mergeConfigs === void 0 ? void 0 : mergeConfigs[profileId];
    return (react_1.default.createElement("form", null,
        react_1.default.createElement(react_bootstrap_1.FormGroup, { controlId: 'default-enable' },
            react_1.default.createElement(react_bootstrap_1.Panel, null,
                react_1.default.createElement(react_bootstrap_1.Panel.Body, null,
                    react_1.default.createElement(react_bootstrap_1.ControlLabel, null, t('Stardew Valley')),
                    react_1.default.createElement(vortex_api_1.Toggle, { checked: useRecommendations, onToggle: setUseRecommendations, disabled: true },
                        t('Use recommendations from the mod manifests'),
                        react_1.default.createElement(vortex_api_1.More, { id: 'sdv_use_recommendations', name: 'SDV Use Recommendations' }, t('If checked, when you install a mod for Stardew Valley you may get '
                            + 'suggestions for installing further mods, required or recommended by it.'
                            + 'This information could be wrong or incomplete so please carefully '
                            + 'consider before accepting them.'))),
                    react_1.default.createElement(vortex_api_1.Toggle, { checked: mergeEnabled, onToggle: setMergeConfigSetting },
                        t('Manage SDV mod configuration files'),
                        react_1.default.createElement(vortex_api_1.More, { id: 'sdv_mod_configuration', name: 'SDV Mod Configuration' }, t('Vortex by default is configured to attempt to pull-in newly created files (mod configuration json files for example) '
                            + 'created externally (by the game itself or tools) into their respective mod folders.\n\n'
                            + 'Unfortunately the configuration files are lost during mod updates when using this method.\n\n'
                            + 'Toggling this functionality creates a separate mod configuration "override" folder where all of your mod configuration files '
                            + 'will be stored. This allows you to manage your mod configuration files on their own, regardless of mod updates. '))))))));
}
function mapStateToProps(state) {
    const profileId = vortex_api_1.selectors.lastActiveProfileForGame(state, common_1.GAME_ID);
    return {
        profileId,
    };
}
exports.default = Settings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTZXR0aW5ncy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFDMUIscURBQTRFO0FBQzVFLGlEQUErQztBQUMvQyw2Q0FBb0Q7QUFDcEQsMkNBQTREO0FBQzVELHVDQUErQztBQUMvQyxxQ0FBbUM7QUFXbkMsU0FBUyxRQUFRLENBQUMsS0FBaUI7SUFDakMsTUFBTSxFQUFFLG1CQUFtQixFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3RDLE1BQU0sV0FBVyxHQUFHLElBQUEseUJBQVcsRUFBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsR0FBRyxXQUFXLENBQUM7SUFDekQsTUFBTSxLQUFLLEdBQUcsSUFBQSxzQkFBUSxHQUFFLENBQUM7SUFDekIsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUEseUJBQVcsRUFBQyxlQUFlLENBQUMsQ0FBQztJQUVuRCxNQUFNLHFCQUFxQixHQUFHLGVBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFnQixFQUFFLEVBQUU7UUFDbkUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFBLDRCQUFrQixFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsTUFBTSxxQkFBcUIsR0FBRyxlQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBZ0IsRUFBRSxFQUFFO1FBQ25FLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRXJDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFBLDhCQUFjLEdBQUUsQ0FBQztJQUMvQixNQUFNLFlBQVksR0FBRyxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUcsU0FBUyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUNMO1FBQ0UsOEJBQUMsMkJBQVMsSUFBQyxTQUFTLEVBQUMsZ0JBQWdCO1lBQ25DLDhCQUFDLHVCQUFLO2dCQUNKLDhCQUFDLHVCQUFLLENBQUMsSUFBSTtvQkFDVCw4QkFBQyw4QkFBWSxRQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFnQjtvQkFDbEQsOEJBQUMsbUJBQU0sSUFDTCxPQUFPLEVBQUUsa0JBQWtCLEVBQzNCLFFBQVEsRUFBRSxxQkFBcUIsRUFDL0IsUUFBUSxFQUFFLElBQUk7d0JBRWIsQ0FBQyxDQUFDLDRDQUE0QyxDQUFDO3dCQUNoRCw4QkFBQyxpQkFBSSxJQUFDLEVBQUUsRUFBQyx5QkFBeUIsRUFBQyxJQUFJLEVBQUMseUJBQXlCLElBQzlELENBQUMsQ0FBQyxvRUFBb0U7OEJBQ25FLHlFQUF5RTs4QkFDekUsb0VBQW9FOzhCQUNwRSxpQ0FBaUMsQ0FBQyxDQUNqQyxDQUNBO29CQUNULDhCQUFDLG1CQUFNLElBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUscUJBQXFCO3dCQUMzRCxDQUFDLENBQUMsb0NBQW9DLENBQUM7d0JBQ3hDLDhCQUFDLGlCQUFJLElBQUMsRUFBRSxFQUFDLHVCQUF1QixFQUFDLElBQUksRUFBQyx1QkFBdUIsSUFDMUQsQ0FBQyxDQUFDLHVIQUF1SDs4QkFDdEgseUZBQXlGOzhCQUN6RiwrRkFBK0Y7OEJBQy9GLCtIQUErSDs4QkFDL0gsa0hBQWtILENBQ3JILENBQ0ksQ0FDQSxDQUNFLENBQ1AsQ0FDRSxDQUNQLENBQ1IsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxLQUFtQjtJQUMxQyxNQUFNLFNBQVMsR0FBRyxzQkFBUyxDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxnQkFBTyxDQUFDLENBQUM7SUFDckUsT0FBTztRQUNMLFNBQVM7S0FDVixDQUFBO0FBQ0gsQ0FBQztBQUVELGtCQUFlLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb250cm9sTGFiZWwsIEZvcm1Hcm91cCwgSGVscEJsb2NrLCBQYW5lbCB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCc7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgVG9nZ2xlLCBNb3JlLCBzZWxlY3RvcnMsIHR5cGVzIH0gZnJvbSAndm9ydGV4LWFwaSc7XG5pbXBvcnQgeyBzZXRSZWNvbW1lbmRhdGlvbnMgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgR0FNRV9JRCB9IGZyb20gJy4vY29tbW9uJztcblxuaW1wb3J0IHsgaXNXaW5kb3dzIH0gZnJvbSAndm9ydGV4LWFwaSc7XG5pbnRlcmZhY2UgSUJhc2VQcm9wcyB7XG4gIG9uTWVyZ2VDb25maWdUb2dnbGU6IChwcm9maWxlSWQ6IHN0cmluZywgZW5hYmxlZDogYm9vbGVhbikgPT4gUHJvbWlzZTx2b2lkPjtcbn1cblxuaW50ZXJmYWNlIElDb25uZWN0ZWRQcm9wcyB7XG4gIHByb2ZpbGVJZDogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBTZXR0aW5ncyhwcm9wczogSUJhc2VQcm9wcykge1xuICBjb25zdCB7IG9uTWVyZ2VDb25maWdUb2dnbGUgfSA9IHByb3BzO1xuICBjb25zdCBzZHZTZXR0aW5ncyA9IHVzZVNlbGVjdG9yKChzdGF0ZTogYW55KSA9PiBzdGF0ZS5zZXR0aW5nc1snU0RWJ10pO1xuICBjb25zdCB7IHVzZVJlY29tbWVuZGF0aW9ucywgbWVyZ2VDb25maWdzIH0gPSBzZHZTZXR0aW5ncztcbiAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICBjb25zdCB7IHByb2ZpbGVJZCB9ID0gdXNlU2VsZWN0b3IobWFwU3RhdGVUb1Byb3BzKTtcblxuICBjb25zdCBzZXRVc2VSZWNvbW1lbmRhdGlvbnMgPSBSZWFjdC51c2VDYWxsYmFjaygoZW5hYmxlZDogYm9vbGVhbikgPT4ge1xuICAgIHN0b3JlLmRpc3BhdGNoKHNldFJlY29tbWVuZGF0aW9ucyhlbmFibGVkKSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBzZXRNZXJnZUNvbmZpZ1NldHRpbmcgPSBSZWFjdC51c2VDYWxsYmFjaygoZW5hYmxlZDogYm9vbGVhbikgPT4ge1xuICAgIG9uTWVyZ2VDb25maWdUb2dnbGUocHJvZmlsZUlkLCBlbmFibGVkKTtcbiAgfSwgW29uTWVyZ2VDb25maWdUb2dnbGUsIHByb2ZpbGVJZF0pO1xuXG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgbWVyZ2VFbmFibGVkID0gbWVyZ2VDb25maWdzPy5bcHJvZmlsZUlkXTtcbiAgcmV0dXJuIChcbiAgICA8Zm9ybT5cbiAgICAgIDxGb3JtR3JvdXAgY29udHJvbElkPSdkZWZhdWx0LWVuYWJsZSc+XG4gICAgICAgIDxQYW5lbD5cbiAgICAgICAgICA8UGFuZWwuQm9keT5cbiAgICAgICAgICAgIDxDb250cm9sTGFiZWw+e3QoJ1N0YXJkZXcgVmFsbGV5Jyl9PC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICA8VG9nZ2xlXG4gICAgICAgICAgICAgIGNoZWNrZWQ9e3VzZVJlY29tbWVuZGF0aW9uc31cbiAgICAgICAgICAgICAgb25Ub2dnbGU9e3NldFVzZVJlY29tbWVuZGF0aW9uc31cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCdVc2UgcmVjb21tZW5kYXRpb25zIGZyb20gdGhlIG1vZCBtYW5pZmVzdHMnKX1cbiAgICAgICAgICAgICAgPE1vcmUgaWQ9J3Nkdl91c2VfcmVjb21tZW5kYXRpb25zJyBuYW1lPSdTRFYgVXNlIFJlY29tbWVuZGF0aW9ucyc+XG4gICAgICAgICAgICAgICAge3QoJ0lmIGNoZWNrZWQsIHdoZW4geW91IGluc3RhbGwgYSBtb2QgZm9yIFN0YXJkZXcgVmFsbGV5IHlvdSBtYXkgZ2V0ICdcbiAgICAgICAgICAgICAgICAgICsgJ3N1Z2dlc3Rpb25zIGZvciBpbnN0YWxsaW5nIGZ1cnRoZXIgbW9kcywgcmVxdWlyZWQgb3IgcmVjb21tZW5kZWQgYnkgaXQuJ1xuICAgICAgICAgICAgICAgICAgKyAnVGhpcyBpbmZvcm1hdGlvbiBjb3VsZCBiZSB3cm9uZyBvciBpbmNvbXBsZXRlIHNvIHBsZWFzZSBjYXJlZnVsbHkgJ1xuICAgICAgICAgICAgICAgICAgKyAnY29uc2lkZXIgYmVmb3JlIGFjY2VwdGluZyB0aGVtLicpfVxuICAgICAgICAgICAgICA8L01vcmU+XG4gICAgICAgICAgICA8L1RvZ2dsZT5cbiAgICAgICAgICAgIDxUb2dnbGUgY2hlY2tlZD17bWVyZ2VFbmFibGVkfSBvblRvZ2dsZT17c2V0TWVyZ2VDb25maWdTZXR0aW5nfT5cbiAgICAgICAgICAgICAge3QoJ01hbmFnZSBTRFYgbW9kIGNvbmZpZ3VyYXRpb24gZmlsZXMnKX1cbiAgICAgICAgICAgICAgPE1vcmUgaWQ9J3Nkdl9tb2RfY29uZmlndXJhdGlvbicgbmFtZT0nU0RWIE1vZCBDb25maWd1cmF0aW9uJz5cbiAgICAgICAgICAgICAgICB7dCgnVm9ydGV4IGJ5IGRlZmF1bHQgaXMgY29uZmlndXJlZCB0byBhdHRlbXB0IHRvIHB1bGwtaW4gbmV3bHkgY3JlYXRlZCBmaWxlcyAobW9kIGNvbmZpZ3VyYXRpb24ganNvbiBmaWxlcyBmb3IgZXhhbXBsZSkgJ1xuICAgICAgICAgICAgICAgICAgKyAnY3JlYXRlZCBleHRlcm5hbGx5IChieSB0aGUgZ2FtZSBpdHNlbGYgb3IgdG9vbHMpIGludG8gdGhlaXIgcmVzcGVjdGl2ZSBtb2QgZm9sZGVycy5cXG5cXG4nXG4gICAgICAgICAgICAgICAgICArICdVbmZvcnR1bmF0ZWx5IHRoZSBjb25maWd1cmF0aW9uIGZpbGVzIGFyZSBsb3N0IGR1cmluZyBtb2QgdXBkYXRlcyB3aGVuIHVzaW5nIHRoaXMgbWV0aG9kLlxcblxcbidcbiAgICAgICAgICAgICAgICAgICsgJ1RvZ2dsaW5nIHRoaXMgZnVuY3Rpb25hbGl0eSBjcmVhdGVzIGEgc2VwYXJhdGUgbW9kIGNvbmZpZ3VyYXRpb24gXCJvdmVycmlkZVwiIGZvbGRlciB3aGVyZSBhbGwgb2YgeW91ciBtb2QgY29uZmlndXJhdGlvbiBmaWxlcyAnXG4gICAgICAgICAgICAgICAgICArICd3aWxsIGJlIHN0b3JlZC4gVGhpcyBhbGxvd3MgeW91IHRvIG1hbmFnZSB5b3VyIG1vZCBjb25maWd1cmF0aW9uIGZpbGVzIG9uIHRoZWlyIG93biwgcmVnYXJkbGVzcyBvZiBtb2QgdXBkYXRlcy4gJ1xuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvTW9yZT5cbiAgICAgICAgICAgIDwvVG9nZ2xlPlxuICAgICAgICAgIDwvUGFuZWwuQm9keT5cbiAgICAgICAgPC9QYW5lbD5cbiAgICAgIDwvRm9ybUdyb3VwPlxuICAgIDwvZm9ybT5cbiAgKTtcbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlOiB0eXBlcy5JU3RhdGUpOiBJQ29ubmVjdGVkUHJvcHMge1xuICBjb25zdCBwcm9maWxlSWQgPSBzZWxlY3RvcnMubGFzdEFjdGl2ZVByb2ZpbGVGb3JHYW1lKHN0YXRlLCBHQU1FX0lEKTtcbiAgcmV0dXJuIHtcbiAgICBwcm9maWxlSWQsXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2V0dGluZ3M7XG4iXX0=