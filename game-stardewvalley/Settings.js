"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_bootstrap_1 = require("react-bootstrap");
const react_i18next_1 = require("react-i18next");
const react_redux_1 = require("react-redux");
const vortex_api_1 = require("vortex-api");
const actions_1 = require("./actions");
const common_1 = require("./common");
function Settings(props) {
    const { onMergeConfigToggle } = props;
    const sdvSettings = (0, react_redux_1.useSelector)((state) => state.settings['SDV']);
    const { useRecommendations, mergeConfigs } = sdvSettings;
    const store = (0, react_redux_1.useStore)();
    const { profileId } = (0, react_redux_1.useSelector)(mapStateToProps);
    const setUseRecommendations = react_1.default.useCallback((enabled) => {
        store.dispatch((0, actions_1.setRecommendations)(enabled));
    }, []);
    const setMergeConfigSetting = react_1.default.useCallback((enabled) => {
        onMergeConfigToggle(profileId, enabled);
    }, [onMergeConfigToggle, profileId]);
    const { t } = (0, react_i18next_1.useTranslation)();
    const mergeEnabled = mergeConfigs === null || mergeConfigs === void 0 ? void 0 : mergeConfigs[profileId];
    return (react_1.default.createElement("form", null,
        react_1.default.createElement(react_bootstrap_1.FormGroup, { controlId: 'default-enable' },
            react_1.default.createElement(react_bootstrap_1.Panel, null,
                react_1.default.createElement(react_bootstrap_1.Panel.Body, null,
                    react_1.default.createElement(react_bootstrap_1.ControlLabel, null, t('Stardew Valley')),
                    react_1.default.createElement(vortex_api_1.Toggle, { checked: useRecommendations, onToggle: setUseRecommendations, disabled: true },
                        t('Use recommendations from the mod manifests'),
                        react_1.default.createElement(vortex_api_1.More, { id: 'sdv_use_recommendations', name: 'SDV Use Recommendations' }, t('If checked, when you install a mod for Stardew Valley you may get '
                            + 'suggestions for installing further mods, required or recommended by it.'
                            + 'This information could be wrong or incomplete so please carefully '
                            + 'consider before accepting them.'))),
                    react_1.default.createElement(vortex_api_1.Toggle, { checked: mergeEnabled, onToggle: setMergeConfigSetting },
                        t('Manage SDV mod configuration files'),
                        react_1.default.createElement(vortex_api_1.More, { id: 'sdv_mod_configuration', name: 'SDV Mod Configuration' }, t('Vortex by default is configured to attempt to pull-in newly created files (mod configuration json files for example) '
                            + 'created externally (by the game itself or tools) into their respective mod folders.\n\n'
                            + 'Unfortunately the configuration files are lost during mod updates when using this method.\n\n'
                            + 'Toggling this functionality creates a separate mod configuration "override" folder where all of your mod configuration files '
                            + 'will be stored. This allows you to manage your mod configuration files on their own, regardless of mod updates. '))))))));
}
function mapStateToProps(state) {
    const profileId = vortex_api_1.selectors.lastActiveProfileForGame(state, common_1.GAME_ID);
    return {
        profileId,
    };
}
exports.default = Settings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTZXR0aW5ncy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFDMUIscURBQTRFO0FBQzVFLGlEQUErQztBQUMvQyw2Q0FBb0Q7QUFDcEQsMkNBQTREO0FBQzVELHVDQUErQztBQUMvQyxxQ0FBbUM7QUFXbkMsU0FBUyxRQUFRLENBQUMsS0FBaUI7SUFDakMsTUFBTSxFQUFFLG1CQUFtQixFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3RDLE1BQU0sV0FBVyxHQUFHLElBQUEseUJBQVcsRUFBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsR0FBRyxXQUFXLENBQUM7SUFDekQsTUFBTSxLQUFLLEdBQUcsSUFBQSxzQkFBUSxHQUFFLENBQUM7SUFDekIsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUEseUJBQVcsRUFBQyxlQUFlLENBQUMsQ0FBQztJQUVuRCxNQUFNLHFCQUFxQixHQUFHLGVBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFnQixFQUFFLEVBQUU7UUFDbkUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFBLDRCQUFrQixFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsTUFBTSxxQkFBcUIsR0FBRyxlQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBZ0IsRUFBRSxFQUFFO1FBQ25FLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRXJDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFBLDhCQUFjLEdBQUUsQ0FBQztJQUMvQixNQUFNLFlBQVksR0FBRyxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUcsU0FBUyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUNMO1FBQ0UsOEJBQUMsMkJBQVMsSUFBQyxTQUFTLEVBQUMsZ0JBQWdCO1lBQ25DLDhCQUFDLHVCQUFLO2dCQUNKLDhCQUFDLHVCQUFLLENBQUMsSUFBSTtvQkFDVCw4QkFBQyw4QkFBWSxRQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFnQjtvQkFDbEQsOEJBQUMsbUJBQU0sSUFDTCxPQUFPLEVBQUUsa0JBQWtCLEVBQzNCLFFBQVEsRUFBRSxxQkFBcUIsRUFDL0IsUUFBUSxFQUFFLElBQUk7d0JBRWIsQ0FBQyxDQUFDLDRDQUE0QyxDQUFDO3dCQUNoRCw4QkFBQyxpQkFBSSxJQUFDLEVBQUUsRUFBQyx5QkFBeUIsRUFBQyxJQUFJLEVBQUMseUJBQXlCLElBQzlELENBQUMsQ0FBQyxvRUFBb0U7OEJBQ25FLHlFQUF5RTs4QkFDekUsb0VBQW9FOzhCQUNwRSxpQ0FBaUMsQ0FBQyxDQUNqQyxDQUNBO29CQUNULDhCQUFDLG1CQUFNLElBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUscUJBQXFCO3dCQUMzRCxDQUFDLENBQUMsb0NBQW9DLENBQUM7d0JBQ3hDLDhCQUFDLGlCQUFJLElBQUMsRUFBRSxFQUFDLHVCQUF1QixFQUFDLElBQUksRUFBQyx1QkFBdUIsSUFDMUQsQ0FBQyxDQUFDLHVIQUF1SDs4QkFDdEgseUZBQXlGOzhCQUN6RiwrRkFBK0Y7OEJBQy9GLCtIQUErSDs4QkFDL0gsa0hBQWtILENBQ3JILENBQ0ksQ0FDQSxDQUNFLENBQ1AsQ0FDRSxDQUNQLENBQ1IsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxLQUFtQjtJQUMxQyxNQUFNLFNBQVMsR0FBRyxzQkFBUyxDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxnQkFBTyxDQUFDLENBQUM7SUFDckUsT0FBTztRQUNMLFNBQVM7S0FDVixDQUFBO0FBQ0gsQ0FBQztBQUVELGtCQUFlLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb250cm9sTGFiZWwsIEZvcm1Hcm91cCwgSGVscEJsb2NrLCBQYW5lbCB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCc7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgVG9nZ2xlLCBNb3JlLCBzZWxlY3RvcnMsIHR5cGVzIH0gZnJvbSAndm9ydGV4LWFwaSc7XG5pbXBvcnQgeyBzZXRSZWNvbW1lbmRhdGlvbnMgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgR0FNRV9JRCB9IGZyb20gJy4vY29tbW9uJztcblxuaW1wb3J0IHsgaXNXaW5kb3dzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL3V0aWwvcGxhdGZvcm0nO1xuaW50ZXJmYWNlIElCYXNlUHJvcHMge1xuICBvbk1lcmdlQ29uZmlnVG9nZ2xlOiAocHJvZmlsZUlkOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD47XG59XG5cbmludGVyZmFjZSBJQ29ubmVjdGVkUHJvcHMge1xuICBwcm9maWxlSWQ6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gU2V0dGluZ3MocHJvcHM6IElCYXNlUHJvcHMpIHtcbiAgY29uc3QgeyBvbk1lcmdlQ29uZmlnVG9nZ2xlIH0gPSBwcm9wcztcbiAgY29uc3Qgc2R2U2V0dGluZ3MgPSB1c2VTZWxlY3Rvcigoc3RhdGU6IGFueSkgPT4gc3RhdGUuc2V0dGluZ3NbJ1NEViddKTtcbiAgY29uc3QgeyB1c2VSZWNvbW1lbmRhdGlvbnMsIG1lcmdlQ29uZmlncyB9ID0gc2R2U2V0dGluZ3M7XG4gIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKTtcbiAgY29uc3QgeyBwcm9maWxlSWQgfSA9IHVzZVNlbGVjdG9yKG1hcFN0YXRlVG9Qcm9wcyk7XG5cbiAgY29uc3Qgc2V0VXNlUmVjb21tZW5kYXRpb25zID0gUmVhY3QudXNlQ2FsbGJhY2soKGVuYWJsZWQ6IGJvb2xlYW4pID0+IHtcbiAgICBzdG9yZS5kaXNwYXRjaChzZXRSZWNvbW1lbmRhdGlvbnMoZW5hYmxlZCkpO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgc2V0TWVyZ2VDb25maWdTZXR0aW5nID0gUmVhY3QudXNlQ2FsbGJhY2soKGVuYWJsZWQ6IGJvb2xlYW4pID0+IHtcbiAgICBvbk1lcmdlQ29uZmlnVG9nZ2xlKHByb2ZpbGVJZCwgZW5hYmxlZCk7XG4gIH0sIFtvbk1lcmdlQ29uZmlnVG9nZ2xlLCBwcm9maWxlSWRdKTtcblxuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IG1lcmdlRW5hYmxlZCA9IG1lcmdlQ29uZmlncz8uW3Byb2ZpbGVJZF07XG4gIHJldHVybiAoXG4gICAgPGZvcm0+XG4gICAgICA8Rm9ybUdyb3VwIGNvbnRyb2xJZD0nZGVmYXVsdC1lbmFibGUnPlxuICAgICAgICA8UGFuZWw+XG4gICAgICAgICAgPFBhbmVsLkJvZHk+XG4gICAgICAgICAgICA8Q29udHJvbExhYmVsPnt0KCdTdGFyZGV3IFZhbGxleScpfTwvQ29udHJvbExhYmVsPlxuICAgICAgICAgICAgPFRvZ2dsZVxuICAgICAgICAgICAgICBjaGVja2VkPXt1c2VSZWNvbW1lbmRhdGlvbnN9XG4gICAgICAgICAgICAgIG9uVG9nZ2xlPXtzZXRVc2VSZWNvbW1lbmRhdGlvbnN9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXt0cnVlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnVXNlIHJlY29tbWVuZGF0aW9ucyBmcm9tIHRoZSBtb2QgbWFuaWZlc3RzJyl9XG4gICAgICAgICAgICAgIDxNb3JlIGlkPSdzZHZfdXNlX3JlY29tbWVuZGF0aW9ucycgbmFtZT0nU0RWIFVzZSBSZWNvbW1lbmRhdGlvbnMnPlxuICAgICAgICAgICAgICAgIHt0KCdJZiBjaGVja2VkLCB3aGVuIHlvdSBpbnN0YWxsIGEgbW9kIGZvciBTdGFyZGV3IFZhbGxleSB5b3UgbWF5IGdldCAnXG4gICAgICAgICAgICAgICAgICArICdzdWdnZXN0aW9ucyBmb3IgaW5zdGFsbGluZyBmdXJ0aGVyIG1vZHMsIHJlcXVpcmVkIG9yIHJlY29tbWVuZGVkIGJ5IGl0LidcbiAgICAgICAgICAgICAgICAgICsgJ1RoaXMgaW5mb3JtYXRpb24gY291bGQgYmUgd3Jvbmcgb3IgaW5jb21wbGV0ZSBzbyBwbGVhc2UgY2FyZWZ1bGx5ICdcbiAgICAgICAgICAgICAgICAgICsgJ2NvbnNpZGVyIGJlZm9yZSBhY2NlcHRpbmcgdGhlbS4nKX1cbiAgICAgICAgICAgICAgPC9Nb3JlPlxuICAgICAgICAgICAgPC9Ub2dnbGU+XG4gICAgICAgICAgICA8VG9nZ2xlIGNoZWNrZWQ9e21lcmdlRW5hYmxlZH0gb25Ub2dnbGU9e3NldE1lcmdlQ29uZmlnU2V0dGluZ30+XG4gICAgICAgICAgICAgIHt0KCdNYW5hZ2UgU0RWIG1vZCBjb25maWd1cmF0aW9uIGZpbGVzJyl9XG4gICAgICAgICAgICAgIDxNb3JlIGlkPSdzZHZfbW9kX2NvbmZpZ3VyYXRpb24nIG5hbWU9J1NEViBNb2QgQ29uZmlndXJhdGlvbic+XG4gICAgICAgICAgICAgICAge3QoJ1ZvcnRleCBieSBkZWZhdWx0IGlzIGNvbmZpZ3VyZWQgdG8gYXR0ZW1wdCB0byBwdWxsLWluIG5ld2x5IGNyZWF0ZWQgZmlsZXMgKG1vZCBjb25maWd1cmF0aW9uIGpzb24gZmlsZXMgZm9yIGV4YW1wbGUpICdcbiAgICAgICAgICAgICAgICAgICsgJ2NyZWF0ZWQgZXh0ZXJuYWxseSAoYnkgdGhlIGdhbWUgaXRzZWxmIG9yIHRvb2xzKSBpbnRvIHRoZWlyIHJlc3BlY3RpdmUgbW9kIGZvbGRlcnMuXFxuXFxuJ1xuICAgICAgICAgICAgICAgICAgKyAnVW5mb3J0dW5hdGVseSB0aGUgY29uZmlndXJhdGlvbiBmaWxlcyBhcmUgbG9zdCBkdXJpbmcgbW9kIHVwZGF0ZXMgd2hlbiB1c2luZyB0aGlzIG1ldGhvZC5cXG5cXG4nXG4gICAgICAgICAgICAgICAgICArICdUb2dnbGluZyB0aGlzIGZ1bmN0aW9uYWxpdHkgY3JlYXRlcyBhIHNlcGFyYXRlIG1vZCBjb25maWd1cmF0aW9uIFwib3ZlcnJpZGVcIiBmb2xkZXIgd2hlcmUgYWxsIG9mIHlvdXIgbW9kIGNvbmZpZ3VyYXRpb24gZmlsZXMgJ1xuICAgICAgICAgICAgICAgICAgKyAnd2lsbCBiZSBzdG9yZWQuIFRoaXMgYWxsb3dzIHlvdSB0byBtYW5hZ2UgeW91ciBtb2QgY29uZmlndXJhdGlvbiBmaWxlcyBvbiB0aGVpciBvd24sIHJlZ2FyZGxlc3Mgb2YgbW9kIHVwZGF0ZXMuICdcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L01vcmU+XG4gICAgICAgICAgICA8L1RvZ2dsZT5cbiAgICAgICAgICA8L1BhbmVsLkJvZHk+XG4gICAgICAgIDwvUGFuZWw+XG4gICAgICA8L0Zvcm1Hcm91cD5cbiAgICA8L2Zvcm0+XG4gICk7XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZTogdHlwZXMuSVN0YXRlKTogSUNvbm5lY3RlZFByb3BzIHtcbiAgY29uc3QgcHJvZmlsZUlkID0gc2VsZWN0b3JzLmxhc3RBY3RpdmVQcm9maWxlRm9yR2FtZShzdGF0ZSwgR0FNRV9JRCk7XG4gIHJldHVybiB7XG4gICAgcHJvZmlsZUlkLFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzO1xuIl19