const { isWindows } = require('vortex-api');
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installMixed = exports.testSupportedMixed = exports.installDLCMod = exports.testDLCMod = exports.installTL = exports.testSupportedTL = exports.installContent = exports.testSupportedContent = exports.installMenuMod = exports.testMenuModRoot = exports.scriptMergerDummyInstaller = exports.scriptMergerTest = void 0;
const path_1 = __importDefault(require("path"));
const common_1 = require("./common");
function scriptMergerTest(files, gameId) {
    const matcher = (file => common_1.SCRIPT_MERGER_FILES.includes(file));
    const supported = ((gameId === common_1.GAME_ID) && (files.filter(matcher).length > 0));
    return Promise.resolve({ supported, requiredFiles: common_1.SCRIPT_MERGER_FILES });
}
exports.scriptMergerTest = scriptMergerTest;
function scriptMergerDummyInstaller() {
    return (api) => {
        api.showErrorNotification('Invalid Mod', 'It looks like you tried to install '
            + 'The Witcher 3 Script Merger, which is a tool and not a mod for The Witcher 3.\n\n'
            + 'The script merger should\'ve been installed automatically by Vortex as soon as you activated this extension. '
            + 'If the download or installation has failed for any reason - please let us know why, by reporting the error through '
            + 'our feedback system and make sure to include vortex logs. Please note: if you\'ve installed '
            + 'the script merger in previous versions of Vortex as a mod and STILL have it installed '
            + '(it\'s present in your mod list) - you should consider un-installing it followed by a Vortex restart; '
            + 'the automatic merger installer/updater should then kick off and set up the tool for you.', { allowReport: false });
        return Promise.reject(new util.ProcessCanceled('Invalid mod'));
    };
}
exports.scriptMergerDummyInstaller = scriptMergerDummyInstaller;
function testMenuModRoot(instructions, gameId) {
    const hasMenuModPattern = (filePath) => [common_1.CONFIG_MATRIX_REL_PATH, common_1.PART_SUFFIX].some(pattern => filePath.toLowerCase().indexOf(pattern) !== -1);
    const predicate = (instr) => (!!gameId)
        ? ((common_1.GAME_ID === gameId) && (hasMenuModPattern(instr)))
        : ((instr.type === 'copy') && (hasMenuModPattern(instr.source)));
    return (!!gameId)
        ? Promise.resolve({
            supported: instructions.find(predicate) !== undefined,
            requiredFiles: [],
        })
        : Promise.resolve(instructions.find(predicate) !== undefined);
}
exports.testMenuModRoot = testMenuModRoot;
function installMenuMod(files, destinationPath) {
    var _a, _b, _c, _d;
    const filtered = files.filter(file => path_1.default.extname(path_1.default.basename(file)) !== '');
    const inputFiles = filtered.filter(file => file.indexOf(common_1.CONFIG_MATRIX_REL_PATH) !== -1);
    const uniqueInput = inputFiles.reduce((accum, iter) => {
        const fileName = path_1.default.basename(iter);
        if (accum.find(entry => path_1.default.basename(entry) === fileName) !== undefined) {
            return accum;
        }
        const instances = inputFiles.filter(file => path_1.default.basename(file) === fileName);
        if (instances.length > 1) {
            if (iter.toLowerCase().indexOf('backup') === -1) {
                accum.push(iter);
            }
        }
        else {
            accum.push(iter);
        }
        return accum;
    }, []);
    let otherFiles = filtered.filter(file => !inputFiles.includes(file));
    const inputFileDestination = common_1.CONFIG_MATRIX_REL_PATH;
    const binIdx = (_d = (_c = (_b = (_a = uniqueInput === null || uniqueInput === void 0 ? void 0 : uniqueInput[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.split(path_1.default.sep)) === null || _c === void 0 ? void 0 : _c.indexOf) === null || _d === void 0 ? void 0 : _d.call(_c, 'bin');
    const modFiles = otherFiles.filter(file => file.toLowerCase().split(path_1.default.sep).includes('mods'));
    const modsIdx = (modFiles.length > 0)
        ? modFiles[0].toLowerCase().split(path_1.default.sep).indexOf('mods')
        : -1;
    const modNames = (modsIdx !== -1)
        ? modFiles.reduce((accum, iter) => {
            const modName = iter.split(path_1.default.sep).splice(modsIdx + 1, 1).join();
            if (!accum.includes(modName)) {
                accum.push(modName);
            }
            return accum;
        }, [])
        : [];
    if (modFiles.length > 0) {
        otherFiles = otherFiles.filter(file => !modFiles.includes(file));
    }
    const modName = (binIdx > 0)
        ? inputFiles[0].split(path_1.default.sep)[binIdx - 1]
        : ('mod' + path_1.default.basename(destinationPath, '.installing')).replace(/\s/g, '');
    const trimmedFiles = otherFiles.map(file => {
        const source = file;
        let relPath = file.split(path_1.default.sep)
            .slice(binIdx);
        if (relPath[0] === undefined) {
            relPath = file.split(path_1.default.sep);
        }
        const firstSeg = relPath[0].toLowerCase();
        if (firstSeg === 'content' || firstSeg.endsWith(common_1.PART_SUFFIX)) {
            relPath = [].concat(['Mods', modName], relPath);
        }
        return {
            source,
            relPath: relPath.join(path_1.default.sep),
        };
    });
    const toCopyInstruction = (source, destination) => ({
        type: 'copy',
        source,
        destination,
    });
    const inputInstructions = uniqueInput.map(file => toCopyInstruction(file, path_1.default.join(inputFileDestination, path_1.default.basename(file))));
    const otherInstructions = trimmedFiles.map(file => toCopyInstruction(file.source, file.relPath));
    const modFileInstructions = modFiles.map(file => toCopyInstruction(file, file));
    const instructions = [].concat(inputInstructions, otherInstructions, modFileInstructions);
    if (modNames.length > 0) {
        instructions.push({
            type: 'attribute',
            key: 'modComponents',
            value: modNames,
        });
    }
    return Promise.resolve({ instructions });
}
exports.installMenuMod = installMenuMod;
function testSupportedContent(files, gameId) {
    const supported = (gameId === common_1.GAME_ID)
        && (files.find(file => file.toLowerCase().startsWith('content' + path_1.default.sep) !== undefined));
    return Promise.resolve({
        supported,
        requiredFiles: [],
    });
}
exports.testSupportedContent = testSupportedContent;
function installContent(files, destinationPath) {
    return Promise.resolve(files
        .filter(file => file.toLowerCase().startsWith('content' + path_1.default.sep))
        .map(file => {
        const fileBase = file.split(path_1.default.sep).slice(1).join(path_1.default.sep);
        return {
            type: 'copy',
            source: file,
            destination: path_1.default.join('mod' + destinationPath, fileBase),
        };
    }));
}
exports.installContent = installContent;
function testSupportedTL(files, gameId) {
    const supported = (gameId === common_1.GAME_ID)
        && (files.find(file => file.toLowerCase().split(path_1.default.sep).indexOf('mods') !== -1) !== undefined);
    return Promise.resolve({
        supported,
        requiredFiles: [],
    });
}
exports.testSupportedTL = testSupportedTL;
function installTL(files) {
    let prefix = files.reduce((prev, file) => {
        const components = file.toLowerCase().split(path_1.default.sep);
        const idx = components.indexOf('mods');
        if ((idx > 0) && ((prev === undefined) || (idx < prev.length))) {
            return components.slice(0, idx) + path_1.default.sep;
        }
        else {
            return prev;
        }
    }, '');
    const instructions = files
        .filter(file => !file.endsWith(path_1.default.sep) && file.toLowerCase().startsWith(prefix))
        .map(file => ({
        type: 'copy',
        source: file,
        destination: file.slice(prefix.length),
    }));
    return Promise.resolve({ instructions });
}
exports.installTL = installTL;
function testDLCMod(files, gameId) {
    if (gameId !== common_1.GAME_ID) {
        return Promise.resolve({ supported: false, requiredFiles: [] });
    }
    const nonDlcFile = files.find(file => !file.toLowerCase().startsWith('dlc'));
    return (nonDlcFile !== undefined)
        ? Promise.resolve({ supported: false, requiredFiles: [] })
        : Promise.resolve({ supported: true, requiredFiles: [] });
}
exports.testDLCMod = testDLCMod;
function installDLCMod(files) {
    const modNames = [];
    const setModTypeInstr = {
        type: 'setmodtype',
        value: 'witcher3dlc',
    };
    const instructions = files.reduce((accum, iter) => {
        if (path_1.default.extname(iter) === '') {
            return accum;
        }
        const segments = iter.split(path_1.default.sep);
        const properlyFormatted = segments.length > 2
            ? (segments[0].toLowerCase() === 'dlc') && ((segments[2] || '').toLowerCase() === 'content')
            : false;
        const modName = properlyFormatted
            ? segments[1]
            : segments[0];
        modNames.push(modName);
        const destination = properlyFormatted
            ? segments.slice(1).join(path_1.default.sep)
            : segments.join(path_1.default.sep);
        accum.push({
            type: 'copy',
            source: iter,
            destination,
        });
        return accum;
    }, [setModTypeInstr]);
    const modNamesAttr = {
        type: 'attribute',
        key: 'modComponents',
        value: modNames,
    };
    instructions.push(modNamesAttr);
    return Promise.resolve({ instructions });
}
exports.installDLCMod = installDLCMod;
const hasPrefix = (prefix, fileEntry) => {
    const segments = fileEntry.toLowerCase().split(path_1.default.sep);
    const contentIdx = segments.indexOf('content');
    if ([-1, 0].includes(contentIdx)) {
        return false;
    }
    return segments[contentIdx - 1].indexOf(prefix) !== -1;
};
const isRootDirectory = (fileEntry) => {
    const segments = fileEntry.toLowerCase().split(path_1.default.sep);
    return (['mods', 'dlc'].includes(segments[0]));
};
function testSupportedMixed(files, gameId) {
    if (gameId !== common_1.GAME_ID) {
        return Promise.resolve({ supported: false, requiredFiles: [] });
    }
    const hasConfigMatrixFile = files.find(file => path_1.default.basename(file).toLowerCase() === common_1.CONFIG_MATRIX_REL_PATH) !== undefined;
    if (hasConfigMatrixFile) {
        return Promise.resolve({ supported: false, requiredFiles: [] });
    }
    const supported = (files.some(file => hasPrefix('dlc', file))) && (files.some(file => hasPrefix('mod', file)));
    return Promise.resolve({
        supported,
        requiredFiles: [],
    });
}
exports.testSupportedMixed = testSupportedMixed;
function installMixed(files) {
    const modNames = [];
    const instructions = files.reduce((accum, iter) => {
        const isRootDir = isRootDirectory(iter);
        const segments = iter.split(path_1.default.sep);
        if (!path_1.default.extname(segments[segments.length - 1])) {
            return accum;
        }
        let destinationSegments = [];
        const contentIdx = segments.map(seg => seg.toLowerCase()).indexOf('content');
        if (isRootDir) {
            segments.shift();
        }
        else if (contentIdx > 1) {
            segments.splice(contentIdx - 1);
        }
        if (hasPrefix('dlc', iter)) {
            destinationSegments = ['dlc'].concat(segments);
        }
        else if (hasPrefix('mod', iter)) {
            destinationSegments = ['mods'].concat(segments);
        }
        else {
            destinationSegments = iter.split(path_1.default.sep);
        }
        modNames.push(segments[0]);
        const instruction = {
            type: 'copy',
            source: iter,
            destination: destinationSegments.join(path_1.default.sep),
        };
        accum.push(instruction);
        return accum;
    }, []).concat([
        {
            type: 'attribute',
            key: 'modComponents',
            value: Array.from(new Set(modNames)),
        },
        {
            type: 'setmodtype',
            value: 'witcher3menumodroot',
        }
    ]);
    return Promise.resolve({ instructions });
}
exports.installMixed = installMixed;
//# sourceMappingURL=data:application/json;base64,